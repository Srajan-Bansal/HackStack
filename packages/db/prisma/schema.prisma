generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String?
  provider    String?
  password    String
  role        UserRole      @default(USER)
  Submission  Submission[]
  UserProblem UserProblem[]
  createdAt   DateTime      @default(now())
}

model Problem {
  id          Int           @id
  title       String
  description String
  slug        String        @unique
  hidden      Boolean       @default(false)
  difficulty  Difficulty
  type        ProblemType[]
  Submission  Submission[]
  DefaultCode DefaultCode[]
  UserProblem UserProblem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([slug])
}

model UserProblem {
  id        String        @id @default(uuid())
  status    ProblemStatus @default(NOT_ATTEMPTED)
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem       @relation(fields: [problemId], references: [id])
  problemId Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, problemId])
}

model DefaultCode {
  id              String          @id @default(uuid())
  code            String
  Language        Language        @relation(fields: [languageId], references: [id])
  languageId      Int
  Problem         Problem         @relation(fields: [problemId], references: [id])
  DefaultCodeType DefaultCodeType
  problemId       Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([problemId, languageId, DefaultCodeType])
}

model TestCase {
  id               String         @id @default(uuid())
  status           TestCaseStatus @default(PENDING)
  index            Int
  memory           Float?
  runtime          Float?
  input            String
  output           String
  judge0TrackingId String         @unique
  Submission       Submission?    @relation(fields: [submissionId], references: [id])
  submissionId     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Submission {
  id                String           @id @default(uuid())
  code              String
  fullCode          String
  status            SubmissionStatus @default(PENDING)
  runtime           Float?
  memory            Float?
  User              User?            @relation(fields: [userId], references: [id])
  userId            String
  Language          Language         @relation(fields: [languageId], references: [id])
  languageId        Int
  Problem           Problem?         @relation(fields: [problemId], references: [id])
  problemId         Int?
  TestCases         TestCase[]
  judge0TrackingIds String[]
  createdAt         DateTime         @default(now())
}

model Language {
  id            Int           @id @default(autoincrement())
  name          String
  judge0Id      Int
  fileExtension String
  monaco        String
  DefaultCode   DefaultCode[]
  Submission    Submission[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum TestCaseStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  OUTPUT_LIMIT_EXCEEDED
  COMPILATION_ERROR
  PENDING
}

enum SubmissionStatus {
  SUCCESS
  PENDING
  REJECTED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum DefaultCodeType {
  FULLBOILERPLATECODE
  PARTIALBOILERPLATECODE
}

enum ProblemType {
  Array
  String
  HashTable
  LinkedList
  Math
  Stack
  Sorting
}

enum UserRole {
  ADMIN
  USER
}

enum ProblemStatus {
  NOT_ATTEMPTED
  ATTEMPTED
  SOLVED
}
